#include <iostream>
#include <cstring>
using namespace std;

int n[7];
int v;
int value;
bool flag;
int dp[100000];

int max(int a, int b) {
	return a>b?a:b;
}

void CompletePack(int cost, int weight) {
	for(int i=cost;i<=v;i++){
		dp[i] = max(dp[i], dp[i-cost]+weight);
		if(dp[i] == v) {
			flag = true;
			return;
		}
	}
	return;
}

void ZeroOnePack(int cost, int weight) {
	for(int i=v; i>=cost; i--) {
		dp[i] = max(dp[i], dp[i-cost]+weight);
		if(dp[i] == v) {
			flag = true;
			return;
		}
	}
	return;
}

void MultiplePack(int cost, int weight, int amount) {
	if(cost*amount>=v) {
		CompletePack(cost, weight);
		return;
	}

	if(flag) return;

	int k=1;
	while(k<amount) {
		ZeroOnePack(k*cost, k*weight);
		if(flag) return;

		amount-=k;
		k*=2;
	}
	ZeroOnePack(amount*cost, amount*weight);
	return;
}

main(int i) {
	int test=1;
	while(cin >>n[1] >> n[2] >> n[3] >> n[4] >> n[5] >> n[6]) {
		value=0;
		for(i=1;i<=6;++i) {
			value+=i*n[i];
		}

		if(value==0)break;

		if(value%2) {
			cout<<"Collection #" <<test++<<":"<<endl;
			cout<<"Can't be divided."<<endl<<endl;
			continue;
		}

		v= value/2;
		memset(dp,-1,sizeof(dp));
		dp[0]=0;
		flag=false;
		
		for(i=1;i<=6;i++){
			MultiplePack(i,i,n[i]);

			if(flag) break;
		}

		if(flag){
		
			cout<<"Collection #" <<test++<<":"<<endl;
			cout<<"Can be divided."<<endl<<endl;
			continue;
		}else {
		
			cout<<"Collection #" <<test++<<":"<<endl;
			cout<<"Can't be divided."<<endl<<endl;
			continue;
		} 
	}
}
